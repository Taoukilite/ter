#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('plateforme:server');
var http = require('http');
var amqp = require('amqplib/callback_api');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * WebSocket using socket.io
 */

var io = require('socket.io')(server);
io.on('connection', function (socket) {
    /* connection au server rabbitmq pour chaque connection websocket */
    //socket.on('ready',function(data){
        amqp.connect("amqp://localhost/",
            function(err, conn){
                if (err != null){
                    console.log("Connection error");
                    console.error(err);
                    process.exit(1);
                }
                conn.createChannel(function(err, ch) {
                    if (err != null){
                        console.log("Channel creation error");
                        console.error(err);
                        process.exit(1);
                    }
                    else if(ch != null) {
                        var QueueW = 'Work_queue';
                        var QueueR = 'Response_queue';
                        ch.assertQueue(QueueW, {durable: false});

                        ch.prefetch(1);
                        //var msg = "function(){return ' "+r+" "+r+" "+r+" ';}";
                       // io.on('ready',function(){
                            ch.consume(QueueW, function(msg) {
                                console.log(msg.content.toString());
                                socket.emit('job',msg.content.toString());
                                socket.on('res', function (data) {
                                    console.log(data);
                                    //socket.emit('job',msg.toString());
                                });
                            }, {noAck: true});
                       // });

                    }
                });
            });
    //});

});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
